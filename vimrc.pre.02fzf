function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

function! s:ag_trigger()
  call inputsave()
  let pattern = input('Ag: ')
  call inputrestore()
  if empty(pattern)
    echo 'aborted search.'
  else
    execute 'Ag' pattern
  endif
endfunction

function! s:ag_handler(lines)
  if len(a:lines) < 2 | return | endif

  let [key, line] = a:lines[0:1]
  let [file, line, col] = split(line, ':')[0:2]
  let cmd = get({'ctrl-x': 'split', 'ctrl-v': 'vertical split', 'ctrl-t': 'tabe'}, key, 'e')
  execute cmd escape(file, ' %#\')
  execute line
  execute 'normal!' col.'|'
endfunction

function! s:dir_handler(dir)
  execute 'lcd ~/src/'.a:dir
  execute 'FZF'
endfunction

command! -nargs=1 Ag call fzf#run({
\ 'source':  'ag --nogroup --column --color "'.escape(<q-args>, '"\').'"',
\ 'sink*':   function('<sid>ag_handler'),
\ 'dir':     getcwd(),
\ 'options': '--ansi --expect=ctrl-t,ctrl-v,ctrl-x --no-multi',
\ 'down':    '50%'
\ })

nnoremap <silent> <Leader>f :FZF<CR>

nnoremap <silent> <Leader>a :call <sid>ag_trigger()<CR>

nnoremap <silent> <Leader>b :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>

nnoremap <silent> <Leader>p :call fzf#run({
\    'source': 'ls -1 ~/src',
\    'sink' : function('<sid>dir_handler'),
\ })<CR>

nnoremap <silent> <Leader>r :call fzf#run({
\    'source': v:oldfiles,
\    'sink' : 'e ',
\    'options' : '-m',
\ })<CR>
