#!/bin/sh

# aliases: save typing
alias ll="ls -l $LS_OPTIONS"
alias l="ll -h"
alias dir="ls -1"
alias pk="pkill -9 -f"
alias v="$EDITOR"
alias vi="$EDITOR"
alias vim="$EDITOR"
alias g="git"

# aliases: default options
alias rm="rm -i"
alias ping="ping -c4 -t4"
alias route="route -n"
alias netstat="netstat -n"
alias bc="bc -q -l"
alias du="du -h -s -c *"
alias grep="grep --color=auto"

# aliases: useful extras
alias trunc='cut -c -${COLUMNS:-80}'
alias sidebyside='diff -W ${COLUMNS:-80} -y'

# aliases: ack/ag
if hash ack-grep 2>/dev/null; then
  alias ack="ack-grep"
fi
if hash rg 2>/dev/null; then
  alias a="rg"
elif hash ag 2>/dev/null; then
  alias a="ag"
else
  alias a="ack"
fi

# aliases: genot
if hash genot 2>/dev/null; then
  alias tip='genot -c ~/.tips'
fi

# aliases: todo.sh
if hash todo.sh 2>/dev/null; then
  alias t='todo.sh'
fi

# get parent pid
ppid () {
    ps -p ${1:-$$} -o ppid=
}

# get the user of the process
puser() {
    ps -p ${1:-$$} -o user=
}

# display short pwd
shortpwd() {
 local PRE= NAME="$PWD" LENGTH=${1:-20}
    [[ "$NAME" != "${NAME#$HOME/}" || -z "${NAME#$HOME}" ]] &&
        PRE+='~' NAME="${NAME#$HOME}" LENGTH=$[LENGTH-1];
    ((${#NAME}>$LENGTH)) && NAME="/...${NAME:$[${#NAME}-LENGTH+4]}";
  echo "$PRE$NAME"
}

check_fzf() {
  if ! hash fzf 2>/dev/null; then
    echo "fzf not found!"
    return 1
  else
    return 0
  fi
}

check_z() {
  if (type z | grep 'not found' >/dev/null 2>&1); then
    echo "z not found!"
    return 1
  else
    return 0
  fi
}

check_in_git_repo() {
  if ! git rev-parse HEAD > /dev/null 2>&1; then
    echo "not in git repo!"
    return 1
  else
    return 0
  fi
}

# file finder
f() {
  if hash ag 2>/dev/null; then
    local match=$1
    shift
    ag -l -i --nocolor -g "$match" $@
  else
    find . -iname "*$1*" -not \( -path '*/.git' -o -path '*/.svn' -o -path '*/.hg' -prune \)
  fi
}

# file browsing
fv() {
  check_fzf || return 1
  if [ -z "$FV_PER_DIR" ]; then
    local selected=$(fzf)
    if [ -f "$selected" ]; then
      ${EDITOR:-echo} $selected
    fi
  else
    local dir=${1:-.}
    local selected=$(ls "$dir" | fzf)
    if [ -n "$selected" ]; then
        if [ -d "$dir/$selected" ]; then
            fv "$dir/$selected"
        else
            ${EDITOR:-echo} "$dir/$selected"
        fi
    fi
  fi
}

# directory browsing
fcd() {
  check_fzf && check_z || return 1
  local dir="$(z -l | awk '/^[0-9]+.*\// {print $2}' | fzf --tac)"
  test -t 1 && cd $dir || echo "cd $dir"
}

# git branch browser
gb() {
  check_fzf && check_in_git_repo || return 1
  local FMT="%C(reset)%C(blue)%cd %C(green)%h %C(reset)%s %C(yellow)(%cn)"
  local branches=$(git for-each-ref refs/heads --sort=-authordate | cut -d/ -f3)
  local branch=$(echo "$branches" | fzf --ansi --no-sort --reverse \
    --header "current branch: $(git rev-parse --abbrev-ref HEAD)" \
    --tiebreak=index \
    --preview "git log --graph --date=short --format='$FMT' {} | head -$LINES")
  if [ $? -ne 0 ]; then
    return
  fi
  if [ -t 1 ]; then
    git checkout $branch
  else
    echo $branch
  fi
}

# git diff browser
gd() {
  check_fzf && check_in_git_repo || return 1
  (
    cd $(git rev-parse --show-toplevel)
    while true; do
      local RES=$(git status --porcelain | \
      fzf --ansi --nth 2 --no-sort --reverse --tiebreak=index \
          --bind=ctrl-s:toggle-sort \
          --header "branch: $(git rev-parse --abbrev-ref HEAD)" \
          --preview 'git diff --color=always -- $(echo {} | grep -o "[^ ]*$")' \
          --expect 'ctrl-m,ctrl-a,ctrl-d' | tail -n2)
      local KEY=$(echo "$RES" | head -n1)
      local STATUS=$(echo "$RES" | tail -n1 | awk '{print $1}')
      local FILE=$(echo "$RES" | tail -n1 | awk '{print $NF}')
      case $KEY in
        ctrl-m)
          if [ "$STATUS" == "M" ]; then
            git diff -- $FILE
          else
            less $FILE
          fi
          ;;
        ctrl-a)
          git add -- $FILE
          ;;
        ctrl-d)
          git reset -q -- $FILE
          ;;
        *)
          exit
      esac
    done
  )
}

# git log browser
gl() {
  check_fzf && check_in_git_repo || return 1
  local FMT="%C(reset)%C(blue)%cd %C(green)%h %C(reset)%s %C(yellow)(%cn)"
  local LN=$LINES
  local HEADER="branch: $(git rev-parse --abbrev-ref HEAD) args: $(echo $@)"
  git log --graph --color=always --date=short --format="$FMT" "$@" | \
  if [ -t 1 ]; then
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --header "$HEADER" \
        --preview "echo {} | grep -o '[a-f0-9]\{7\}' -m 1 |
                   xargs -I % sh -c 'git show --color=always % | head -$LN '" \
        --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' -m 1 |
                xargs -I % sh -c 'git show --color=always %'"
  else
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --header "$HEADER" \
        --preview "echo {} | grep -o '[a-f0-9]\{7\}' -m 1 |
                   xargs -I % sh -c 'git show --color=always % | head -$LN '" \
                     | grep -o '[a-f0-9]\{7\}' -m 1
  fi
}

# open files
open() {
  local open_cmd=""
  case "$OSTYPE" in
    darwin*)
      open_cmd="open"
      ;;
    linux*)
      open_cmd="xdg-open"
      ;;
    cygwin*)
      open_cmd="cygstart"
      ;;
    *)
      echo "Platform $OSTYPE unsupported"
      return 1
      ;;
  esac
  nohup $open_cmd "$@" >/dev/null 2>&1
}
